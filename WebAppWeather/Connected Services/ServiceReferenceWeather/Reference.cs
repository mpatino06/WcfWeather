//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceReferenceWeather
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CityWeatherDTO", Namespace="http://schemas.datacontract.org/2004/07/Wcf.DTOs")]
    public partial class CityWeatherDTO : object
    {
        
        private string CityField;
        
        private System.Nullable<System.DateTime> DateCreatedField;
        
        private string DescriptionField;
        
        private System.Nullable<int> IdCityField;
        
        private int IdCityWeatherField;
        
        private System.Nullable<decimal> TemperatureField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string City
        {
            get
            {
                return this.CityField;
            }
            set
            {
                this.CityField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> DateCreated
        {
            get
            {
                return this.DateCreatedField;
            }
            set
            {
                this.DateCreatedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description
        {
            get
            {
                return this.DescriptionField;
            }
            set
            {
                this.DescriptionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> IdCity
        {
            get
            {
                return this.IdCityField;
            }
            set
            {
                this.IdCityField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IdCityWeather
        {
            get
            {
                return this.IdCityWeatherField;
            }
            set
            {
                this.IdCityWeatherField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> Temperature
        {
            get
            {
                return this.TemperatureField;
            }
            set
            {
                this.TemperatureField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReferenceWeather.IWCFWeatherCity")]
    public interface IWCFWeatherCity
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFWeatherCity/Get", ReplyAction="http://tempuri.org/IWCFWeatherCity/GetResponse")]
        System.Threading.Tasks.Task<ServiceReferenceWeather.CityWeatherDTO[]> GetAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFWeatherCity/GetWeatherCityById", ReplyAction="http://tempuri.org/IWCFWeatherCity/GetWeatherCityByIdResponse")]
        System.Threading.Tasks.Task<ServiceReferenceWeather.CityWeatherDTO> GetWeatherCityByIdAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFWeatherCity/GetWeatherCityByIdCity", ReplyAction="http://tempuri.org/IWCFWeatherCity/GetWeatherCityByIdCityResponse")]
        System.Threading.Tasks.Task<ServiceReferenceWeather.CityWeatherDTO[]> GetWeatherCityByIdCityAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFWeatherCity/InsertWeatherCity", ReplyAction="http://tempuri.org/IWCFWeatherCity/InsertWeatherCityResponse")]
        System.Threading.Tasks.Task<bool> InsertWeatherCityAsync(ServiceReferenceWeather.CityWeatherDTO User);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFWeatherCity/UpdateWeatherCity", ReplyAction="http://tempuri.org/IWCFWeatherCity/UpdateWeatherCityResponse")]
        System.Threading.Tasks.Task UpdateWeatherCityAsync(ServiceReferenceWeather.CityWeatherDTO User);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFWeatherCity/DeleteWeatherCity", ReplyAction="http://tempuri.org/IWCFWeatherCity/DeleteWeatherCityResponse")]
        System.Threading.Tasks.Task DeleteWeatherCityAsync(int Id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface IWCFWeatherCityChannel : ServiceReferenceWeather.IWCFWeatherCity, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class WCFWeatherCityClient : System.ServiceModel.ClientBase<ServiceReferenceWeather.IWCFWeatherCity>, ServiceReferenceWeather.IWCFWeatherCity
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public WCFWeatherCityClient() : 
                base(WCFWeatherCityClient.GetDefaultBinding(), WCFWeatherCityClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IWCFWeatherCity.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public WCFWeatherCityClient(EndpointConfiguration endpointConfiguration) : 
                base(WCFWeatherCityClient.GetBindingForEndpoint(endpointConfiguration), WCFWeatherCityClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public WCFWeatherCityClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(WCFWeatherCityClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public WCFWeatherCityClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(WCFWeatherCityClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public WCFWeatherCityClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<ServiceReferenceWeather.CityWeatherDTO[]> GetAsync()
        {
            return base.Channel.GetAsync();
        }
        
        public System.Threading.Tasks.Task<ServiceReferenceWeather.CityWeatherDTO> GetWeatherCityByIdAsync(int Id)
        {
            return base.Channel.GetWeatherCityByIdAsync(Id);
        }
        
        public System.Threading.Tasks.Task<ServiceReferenceWeather.CityWeatherDTO[]> GetWeatherCityByIdCityAsync(int Id)
        {
            return base.Channel.GetWeatherCityByIdCityAsync(Id);
        }
        
        public System.Threading.Tasks.Task<bool> InsertWeatherCityAsync(ServiceReferenceWeather.CityWeatherDTO User)
        {
            return base.Channel.InsertWeatherCityAsync(User);
        }
        
        public System.Threading.Tasks.Task UpdateWeatherCityAsync(ServiceReferenceWeather.CityWeatherDTO User)
        {
            return base.Channel.UpdateWeatherCityAsync(User);
        }
        
        public System.Threading.Tasks.Task DeleteWeatherCityAsync(int Id)
        {
            return base.Channel.DeleteWeatherCityAsync(Id);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IWCFWeatherCity))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IWCFWeatherCity))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:52918/WCFWeatherCity.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return WCFWeatherCityClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IWCFWeatherCity);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return WCFWeatherCityClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IWCFWeatherCity);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IWCFWeatherCity,
        }
    }
}
